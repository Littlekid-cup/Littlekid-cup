(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{432:function(t,i,v){"use strict";v.r(i);var _=v(1),e=Object(_.a)({},(function(){var t=this,i=t._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"git-基本操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-基本操作"}},[t._v("#")]),t._v(" Git 基本操作")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("git init：初始化仓库")])]),t._v(" "),i("li",[i("p",[t._v("git status: 查看文件状态（红色文件：在工作区;绿色文件:在暂存区）")])]),t._v(" "),i("li",[i("p",[t._v("git add+文件名（文件夹名）：添加文件（文件夹）到暂存区")]),t._v(" "),i("p",[t._v("git add --all ：添加所有文件到暂存区")]),t._v(" "),i("p",[t._v("git add . ：将所有当前文件添加到暂存区")])]),t._v(" "),i("li",[i("p",[t._v("git commit：将文件从暂存区添加到仓库区")]),t._v(" "),i("p",[t._v("git commit -m '提交说明（描述用）'")])]),t._v(" "),i("li",[i("p",[t._v('git config --global user.email "填写邮箱"')]),t._v(" "),i("p",[t._v('git config --global user.name "填写用户名"')])]),t._v(" "),i("li",[i("p",[t._v("git log: 提交日志")])]),t._v(" "),i("li",[i("p",[t._v("git reset: 版本回退，重置")]),t._v(" "),i("p",[t._v("git reset --hard +版本号：回到某一版本（git log 查看 commit）")])])]),t._v(" "),i("h3",{attrs:{id:"新建-gitignore-文件存放不想上传文件的文件名"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#新建-gitignore-文件存放不想上传文件的文件名"}},[t._v("#")]),t._v(" 新建.gitignore 文件存放不想上传文件的文件名")]),t._v(" "),i("p",[t._v("！！.gitignore 配置文件自己不需要被忽略")]),t._v(" "),i("h3",{attrs:{id:"git-分支操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-分支操作"}},[t._v("#")]),t._v(" git 分支操作")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("git branch ：查看所有的分支（绿色代表当前分支）")])]),t._v(" "),i("li",[i("p",[t._v("git branch +分支名：创建分支")])]),t._v(" "),i("li",[i("p",[t._v("git checkout +分支名：切换分支")])]),t._v(" "),i("li",[i("p",[t._v("git merge +分支名：合并分支")]),t._v(" "),i("p",[t._v("先切换到主分支，再使用 git merge+分支名合并分支")])]),t._v(" "),i("li",[i("p",[t._v("git branch -d +分支名：删除分支")])]),t._v(" "),i("li",[i("p",[t._v("git checkout -b +分支名：创建并切换分支")])]),t._v(" "),i("li",[i("p",[t._v("git push -u origin +分支名：推送给远程仓库的某个分支，-u 表示将其设置为默认")])])]),t._v(" "),i("h3",{attrs:{id:"分支合并解决冲突"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分支合并解决冲突"}},[t._v("#")]),t._v(" 分支合并解决冲突")]),t._v(" "),i("ul",[i("li",[t._v("保留双方文件 "),i("strong",[t._v("( git pull 基本上等于 git fetch 加上 git merge)")])]),t._v(" "),i("li",[t._v("git add .并且 git commit -m，提交")]),t._v(" "),i("li",[t._v("1.git checkout dev 切换到 dev 分支")]),t._v(" "),i("li",[t._v("2.git pull origin dev 把远程 dev 分支更新的代码拉取到本地")]),t._v(" "),i("li",[t._v("3.git merge feature/xxx 把自己的分支合并到 dev 分支上，会冲突，解决冲突，完成后重新提交代码推到远程 dev 分支。")]),t._v(" "),i("li",[t._v("4.进入 vim 环境使用 “：q”可以退出")]),t._v(" "),i("li",[t._v("5.所有人可以 git pull origin dev ,保证所有人的 dev 分支是一致的")])]),t._v(" "),i("h3",{attrs:{id:"git-远程仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-远程仓库"}},[t._v("#")]),t._v(" git 远程仓库")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("git clone 从远程仓库中克隆代码到本地")])]),t._v(" "),i("li",[i("p",[t._v("git push 把自己的数据更新到远程仓库中")])]),t._v(" "),i("li",[i("p",[t._v("git pull 拉取远程仓库的更新")])]),t._v(" "),i("li",[i("p",[t._v("git remote add 仓库别名 仓库地址")]),t._v(" "),i("p",[t._v("（默认仓库名:origin 注意克隆的才有 origin）")]),t._v(" "),i("p",[i("strong",[t._v("git remote add origin master")])])])]),t._v(" "),i("p",[t._v("​ git remote -v 查询")]),t._v(" "),i("p",[t._v("​ git remote -u origin master(设置默认地址)")]),t._v(" "),i("p",[t._v("1.新建仓库")]),t._v(" "),i("p",[t._v("填写仓库名称，路径，归属，私有，创建")]),t._v(" "),i("p",[t._v("2.本地项目初始化")]),t._v(" "),i("p",[t._v("3.本地使用 git push 'gitee 远程仓库地址' master")]),t._v(" "),i("p",[t._v("4.！！在目标文件夹里 git clone +远程仓库地址 +（可选）文件名称")]),t._v(" "),i("p",[t._v("5git pull 拉取")]),t._v(" "),i("h3",{attrs:{id:"ssh-免密码登录"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ssh-免密码登录"}},[t._v("#")]),t._v(" SSH 免密码登录")]),t._v(" "),i("ol",[i("li",[t._v("ssh-keygen -t rsa :生成公钥")])])])}),[],!1,null,null,null);i.default=e.exports}}]);